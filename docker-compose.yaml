# Docker Compose file for TurtleBot3 Behavior Examples
#
# Usage:
#
# To build, enter:
#   docker compose up build
#

services:
  # Base image containing dependencies.
  base:
    image: turtlebot3_base
    build:
      context: .
      dockerfile: docker/dockerfile_tb3_base
  
  # Overlay image containing the example source code.
  overlay:
    extends: base
    image: turtlebot3_overlay
    build:
      context: .
      dockerfile: docker/dockerfile_tb3_overlay
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    # Allows graphical programs in the container.
    environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
    # Mount the source code
    - ./tb3_autonomy:/overlay_ws/src/tb3_autonomy:rw
    - ./tb3_worlds:/overlay_ws/src/tb3_worlds:rw
    # Allows graphical programs in the container.
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    command: sleep infinity

  # Runs basic TurtleBot3 simulation
  sim:
    extends: overlay
    command: ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py

  # Demo world
  demo-world:
    extends: overlay
    command: ros2 launch tb3_worlds tb3_demo_world.launch.py

  # Behavior demo using Python and py_trees
  demo-behavior-py:
    extends: overlay
    command: ros2 launch tb3_autonomy tb3_demo_behavior_py.launch.py tree_type:=${BT_TYPE:?} enable_vision:=${ENABLE_VISION:?} target_color:=${TARGET_COLOR:?}

  # Behavior demo using C++ and BehaviorTree.CPP
  demo-behavior-cpp:
    extends: overlay
    command: ros2 launch tb3_autonomy tb3_demo_behavior_cpp.launch.py tree_type:=${BT_TYPE:?} enable_vision:=${ENABLE_VISION:?} target_color:=${TARGET_COLOR:?}
